// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package seely

import (
	"fmt"
	"io"
	"strconv"
)

// `editable` represents whether user can edit this value.
type EditableValue interface {
	IsEditableValue()
}

type Field interface {
	IsField()
}

// `IDNode` only have a id field.
type IDNode interface {
	IsIDNode()
}

type OperationDataInterface interface {
	IsOperationDataInterface()
}

type AuthInfo struct {
	IsActive       bool    `json:"isActive"`
	Token          *string `json:"token"`
	ResetSignature *string `json:"resetSignature"`
}

type Blacklist struct {
	ID       string  `json:"id"`
	Name     string  `json:"name"`
	Photo    *Photo  `json:"photo"`
	Remark   *string `json:"remark"`
	LastSeen *string `json:"lastSeen"`
}

func (Blacklist) IsIDNode() {}

type BlacklistConfig struct {
	EnableNotify bool    `json:"enableNotify"`
	NotifyRoles  []*Role `json:"notifyRoles"`
}

// search: 姓名和备注, orderBy: 姓名
type BlacklistFilterInput struct {
	Search  *string  `json:"search"`
	OrderBy []string `json:"orderBy"`
}

type City struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Province string `json:"province"`
}

type ContentUnit struct {
	Key      string  `json:"key"`
	Value    string  `json:"value"`
	NewValue *string `json:"newValue"`
}

type CreateBlacklistInput struct {
	Name   string      `json:"name"`
	Photo  *PhotoInput `json:"photo"`
	Remark *string     `json:"remark"`
}

// `CoopConsultation`: 合作咨询
type CreateCoopConsultationInput struct {
	Contact string `json:"contact"`
	Email   string `json:"email"`
	Phone   string `json:"phone"`
	Company string `json:"company"`
	Detail  string `json:"detail"`
}

// `derived`: 产生这个随行人的访问ID
type CreateEventInput struct {
	Visitors           []*EventVisitorInput `json:"visitors"`
	Target             *IDInput             `json:"target"`
	TargetOrganization *IDInput             `json:"targetOrganization"`
	Reason             *VisitReason         `json:"reason"`
	BookTime           *string              `json:"bookTime"`
	Derived            *IDInput             `json:"derived"`
}

type CreateEventResult struct {
	IsSuccess bool     `json:"isSuccess"`
	Ids       []string `json:"ids"`
}

type CreateFeedbackInput struct {
	Type      FeedBackType `json:"type"`
	Detail    string       `json:"detail"`
	ContactMe bool         `json:"contactMe"`
	JoinTest  bool         `json:"joinTest"`
}

type CreateMemberInput struct {
	Name           string             `json:"name"`
	Email          string             `json:"email"`
	Blacklist      *bool              `json:"blacklist"`
	Phone          *string            `json:"phone"`
	Password       *string            `json:"password"`
	Role           *IDInput           `json:"role"`
	Photo          *PhotoInput        `json:"photo"`
	IDCard         *string            `json:"idCard"`
	SerialNumber   *string            `json:"serialNumber"`
	DoorCardNumber *string            `json:"doorCardNumber"`
	Department     *IDInput           `json:"department"`
	JobLevel       *IDInput           `json:"jobLevel"`
	Title          *IDInput           `json:"title"`
	Permissions    []*IDInput         `json:"permissions"`
	Tags           []string           `json:"tags"`
	Greeting       *string            `json:"greeting"`
	DisplayName    *string            `json:"displayName"`
	Probation      *bool              `json:"probation"`
	HireDate       *string            `json:"hireDate"`
	CorrectionTime *string            `json:"correctionTime"`
	ExtraData      []*FieldValueInput `json:"extraData"`
	Remark         *string            `json:"remark"`
}

type CreateMemberPermission struct {
	Name         string                     `json:"name"`
	ScheduleType ScheduleType               `json:"scheduleType"`
	Schedules    []*PermissionScheduleInput `json:"schedules"`
	Departments  []*IDInput                 `json:"departments"`
	Devices      []*IDInput                 `json:"devices"`
	Remarks      *string                    `json:"remarks"`
}

type CreateMemberRecordInput struct {
	Start        string       `json:"start"`
	DeviceUUID   string       `json:"deviceUuid"`
	AccessType   AccessType   `json:"accessType"`
	IdentityType IdentityType `json:"identityType"`
	Member       *IDInput     `json:"member"`
	Visitor      *IDInput     `json:"visitor"`
	Capture      *IDInput     `json:"capture"`
	Video        *IDInput     `json:"video"`
	End          *string      `json:"end"`
	StrangerUID  *string      `json:"strangerUid"`
	Extra        *string      `json:"extra"`
}

type CreateOtherPersonInput struct {
	Name           string             `json:"name"`
	Phone          *string            `json:"phone"`
	Photo          *PhotoInput        `json:"photo"`
	Type           *string            `json:"type"`
	IDCard         *string            `json:"idCard"`
	SerialNumber   *string            `json:"serialNumber"`
	DoorCardNumber *string            `json:"doorCardNumber"`
	Email          *string            `json:"email"`
	Permissions    []*IDInput         `json:"permissions"`
	Tags           []string           `json:"tags"`
	Greeting       *string            `json:"greeting"`
	DisplayName    *string            `json:"displayName"`
	ExtraData      []*FieldValueInput `json:"extraData"`
}

type CreateServerInput struct {
	Name string  `json:"name"`
	UUID *string `json:"uuid"`
}

type CreateVehicleInput struct {
	LicensePlate string   `json:"licensePlate"`
	IsActive     bool     `json:"isActive"`
	Owner        *string  `json:"owner"`
	Phone        *string  `json:"phone"`
	Tags         []string `json:"tags"`
	Member       *IDInput `json:"member"`
}

type CreateVehicleRecordInput struct {
	Start        string       `json:"start"`
	DeviceUUID   string       `json:"deviceUuid"`
	AccessType   AccessType   `json:"accessType"`
	IdentityType IdentityType `json:"identityType"`
	Vehicle      *IDInput     `json:"vehicle"`
	End          *string      `json:"end"`
	StrangePlate *string      `json:"strangePlate"`
}

type Department struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	MemberCount *int   `json:"memberCount"`
}

func (Department) IsIDNode() {}

type DepartmentMembers struct {
	Name    string   `json:"name"`
	Members []string `json:"members"`
}

type Device struct {
	ID                string         `json:"id"`
	UUID              string         `json:"uuid"`
	Name              string         `json:"name"`
	Type              DeviceType     `json:"type"`
	Model             *string        `json:"model"`
	Location          *string        `json:"location"`
	Version           *string        `json:"version"`
	Organization      *Organization  `json:"organization"`
	LastSeen          *string        `json:"lastSeen"`
	Status            *DeviceStatus  `json:"status"`
	URL               *string        `json:"url"`
	UsedFor           *DeviceUsedFor `json:"usedFor"`
	Tags              []string       `json:"tags"`
	Timezone          *string        `json:"timezone"`
	ShowUsername      *bool          `json:"showUsername"`
	ShowFaceRect      *bool          `json:"showFaceRect"`
	EnableScreenSaver *bool          `json:"enableScreenSaver"`
	ScreenSaverTime   *int           `json:"screenSaverTime"`
	ScreenSaverPhoto  *Photo         `json:"screenSaverPhoto"`
	Config            []*FieldValue  `json:"config"`
}

func (Device) IsIDNode() {}

type DeviceFilter struct {
	Search       *string         `json:"search"`
	Model        []string        `json:"model"`
	Version      []string        `json:"version"`
	Type         []DeviceType    `json:"type"`
	Status       []DeviceStatus  `json:"status"`
	UsedFor      []DeviceUsedFor `json:"usedFor"`
	Organization []*IDInput      `json:"organization"`
	Tags         []string        `json:"tags"`
}

type District struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	City string `json:"city"`
}

type EditableBool struct {
	Editable bool `json:"editable"`
	Value    bool `json:"value"`
}

func (EditableBool) IsEditableValue() {}

type EditableBoolInput struct {
	Editable bool `json:"editable"`
	Value    bool `json:"value"`
}

type EnhancedPhoto struct {
	ID        string  `json:"id"`
	Src       *string `json:"src"`
	Name      *string `json:"name"`
	Thumbnail *string `json:"thumbnail"`
	Feature   *string `json:"feature"`
}

func (EnhancedPhoto) IsIDNode() {}

// `derived`: 产生这个随行人的访问
type Event struct {
	ID                 string        `json:"id"`
	Visitor            *EventVisitor `json:"visitor"`
	Status             EventStatus   `json:"status"`
	Target             *Member       `json:"target"`
	TargetOrganization *Organization `json:"targetOrganization"`
	Reason             *VisitReason  `json:"reason"`
	BookTime           *string       `json:"bookTime"`
	ArrivalTime        *string       `json:"arrivalTime"`
	LeaveTime          *string       `json:"leaveTime"`
	Derived            *Event        `json:"derived"`
	Partners           []string      `json:"partners"`
	Qrcode             *string       `json:"qrcode"`
}

func (Event) IsIDNode() {}

// `order_by` sample: `['name', 'phone']`
// `is_latest` : return distinct latest events identified by `name`
type EventFilter struct {
	Search        *string       `json:"search"`
	Name          *string       `json:"name"`
	Start         *string       `json:"start"`
	End           *string       `json:"end"`
	Reason        []VisitReason `json:"reason"`
	Status        []EventStatus `json:"status"`
	IsLatest      *bool         `json:"isLatest"`
	GroupID       *string       `json:"groupId"`
	MyVisitorOnly *bool         `json:"myVisitorOnly"`
	OrderBy       []string      `json:"orderBy"`
}

type EventVisitor struct {
	Name        string        `json:"name"`
	Phone       string        `json:"phone"`
	Email       *string       `json:"email"`
	IDType      *IDType       `json:"idType"`
	IDNumber    *string       `json:"idNumber"`
	Plate       *string       `json:"plate"`
	Photo       *Photo        `json:"photo"`
	Company     *string       `json:"company"`
	Department  *string       `json:"department"`
	ExtraData   []*FieldValue `json:"extraData"`
	Remark      *string       `json:"remark"`
	AllowInvite *bool         `json:"allowInvite"`
}

type EventVisitorInput struct {
	Name        string             `json:"name"`
	Phone       string             `json:"phone"`
	Email       *string            `json:"email"`
	IDType      *IDType            `json:"idType"`
	IDNumber    *string            `json:"idNumber"`
	Plate       *string            `json:"plate"`
	Photo       *IDInput           `json:"photo"`
	Company     *string            `json:"company"`
	Department  *string            `json:"department"`
	ExtraData   []*FieldValueInput `json:"extraData"`
	IsNotify    *bool              `json:"isNotify"`
	Remark      *string            `json:"remark"`
	AllowInvite *bool              `json:"allowInvite"`
}

type EventVisitorUpdateInput struct {
	Name       *string            `json:"name"`
	Phone      *string            `json:"phone"`
	Email      *string            `json:"email"`
	IDType     *IDType            `json:"idType"`
	IDNumber   *string            `json:"idNumber"`
	Plate      *string            `json:"plate"`
	Photo      *IDInput           `json:"photo"`
	Company    *string            `json:"company"`
	Department *string            `json:"department"`
	ExtraData  []*FieldValueInput `json:"extraData"`
	Remark     *string            `json:"remark"`
}

type Excel struct {
	Content *string `json:"content"`
}

// `FieldConfig` represents custom field config.
//     `visible` represents whether visible in table.
type FieldConfig struct {
	ID          string             `json:"id"`
	Name        string             `json:"name"`
	Enable      *EditableBool      `json:"enable"`
	Required    *EditableBool      `json:"required"`
	Visible     *EditableBool      `json:"visible"`
	Description *MultiLanguageItem `json:"description"`
}

type FieldConfigInput struct {
	ID          string                  `json:"id"`
	Name        string                  `json:"name"`
	Enable      *EditableBoolInput      `json:"enable"`
	Required    *EditableBoolInput      `json:"required"`
	Visible     *EditableBoolInput      `json:"visible"`
	Description *MultiLanguageItemInput `json:"description"`
}

type FieldValue struct {
	Key      string    `json:"key"`
	Type     FieldType `json:"type"`
	Checkbox *bool     `json:"checkbox"`
	Text     *string   `json:"text"`
	Time     *string   `json:"time"`
	Date     *string   `json:"date"`
	Select   []string  `json:"select"`
}

type FieldValueInput struct {
	Key      string    `json:"key"`
	Type     FieldType `json:"type"`
	Checkbox *bool     `json:"checkbox"`
	Text     *string   `json:"text"`
	Time     *string   `json:"time"`
	Date     *string   `json:"date"`
	Select   []string  `json:"select"`
}

// `FormField` represents form field.
type FormField struct {
	Key           string        `json:"key"`
	Name          string        `json:"name"`
	Type          FieldType     `json:"type"`
	Required      bool          `json:"required"`
	Order         int           `json:"order"`
	Major         *EditableBool `json:"major"`
	Custom        bool          `json:"custom"`
	SelectOptions []string      `json:"selectOptions"`
}

func (FormField) IsField() {}

type FormFieldInput struct {
	Name          string    `json:"name"`
	Type          FieldType `json:"type"`
	Major         bool      `json:"major"`
	Custom        bool      `json:"custom"`
	Key           *string   `json:"key"`
	SelectOptions []string  `json:"selectOptions"`
}

type Greetings struct {
	Authorized   *string `json:"authorized"`
	Vip          *string `json:"vip"`
	Unauthorized *string `json:"unauthorized"`
	IllegalTime  *string `json:"illegalTime"`
}

type GreetingsInput struct {
	Authorized   *string `json:"authorized"`
	Vip          *string `json:"vip"`
	Unauthorized *string `json:"unauthorized"`
	IllegalTime  *string `json:"illegalTime"`
}

type IDInput struct {
	ID string `json:"id"`
}

type IdentityFilter struct {
	Type       IdentityType `json:"type"`
	Department []*IDInput   `json:"department"`
}

type JobLevel struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	MemberCount *int   `json:"memberCount"`
}

func (JobLevel) IsIDNode() {}

// `ListResponse` represent response with count and data.
type ListResponse struct {
	Count int      `json:"count"`
	Data  []IDNode `json:"data"`
}

// `removeTime`: 移除时间
// `campus`: 园区
// `branch`: 分公司
// `probation`: 试用期
// `correctionTime`: 转正时间
// `hireDate`: 入职时间
type Member struct {
	ID             string              `json:"id"`
	Name           string              `json:"name"`
	Status         MemberStatus        `json:"status"`
	Phone          *string             `json:"phone"`
	Role           *Role               `json:"role"`
	Photo          *Photo              `json:"photo"`
	IDCard         *string             `json:"idCard"`
	SerialNumber   *string             `json:"serialNumber"`
	Email          *string             `json:"email"`
	DoorCardNumber *string             `json:"doorCardNumber"`
	Permissions    []*MemberPermission `json:"permissions"`
	Tags           []string            `json:"tags"`
	Greeting       *string             `json:"greeting"`
	DisplayName    *string             `json:"displayName"`
	Campus         *string             `json:"campus"`
	Branch         *string             `json:"branch"`
	Department     *Department         `json:"department"`
	JobLevel       *JobLevel           `json:"jobLevel"`
	Title          *Title              `json:"title"`
	HireDate       *string             `json:"hireDate"`
	Probation      *bool               `json:"probation"`
	CorrectionTime *string             `json:"correctionTime"`
	RemoveTime     *string             `json:"removeTime"`
	Organization   *Organization       `json:"organization"`
	ExtraData      []*FieldValue       `json:"extraData"`
}

func (Member) IsIDNode() {}

type MemberConflict struct {
	Email    string  `json:"email"`
	Original *Member `json:"original"`
	New      *Member `json:"new"`
}

type MemberConflictInput struct {
	Email  string                `json:"email"`
	Action *MemberConflictAction `json:"action"`
}

// `order_by` sample: `['name', 'phone']`
// `isAuthorized` 获取授权给自己代为创建预约的员工(包含自身)
type MemberFilter struct {
	Search        *string            `json:"search"`
	Role          []*IDInput         `json:"role"`
	Departments   []*IDInput         `json:"departments"`
	Titles        []*IDInput         `json:"titles"`
	JobLevels     []*IDInput         `json:"jobLevels"`
	Branches      []string           `json:"branches"`
	Permissions   []*IDInput         `json:"permissions"`
	Tags          []string           `json:"tags"`
	CustomFilters []*FieldValueInput `json:"customFilters"`
	OrderBy       []string           `json:"orderBy"`
	IsAuthorized  *bool              `json:"isAuthorized"`
	SerialNumber  *string            `json:"serialNumber"`
	Email         *string            `json:"email"`
}

// `MemberIdentity`: 身份，当`type`是`ID`时，`department`会有值
type MemberIdentity struct {
	Type       IdentityType  `json:"type"`
	Department []*Department `json:"department"`
}

// `applyAll` :是否适用于所有其他人员
// `isGeneral`: 通用权限
type MemberPermission struct {
	ID           string                `json:"id"`
	Name         string                `json:"name"`
	ApplyAll     bool                  `json:"applyAll"`
	IsGeneral    bool                  `json:"isGeneral"`
	ScheduleType ScheduleType          `json:"scheduleType"`
	Schedules    []*PermissionSchedule `json:"schedules"`
	Departments  []*Department         `json:"departments"`
	Devices      []*Device             `json:"devices"`
	Remarks      *string               `json:"remarks"`
}

func (MemberPermission) IsIDNode() {}

type MemberPermissionFilter struct {
	Search      *string    `json:"search"`
	Departments []*IDInput `json:"departments"`
}

type MemberPermissionInput struct {
	ID string `json:"id"`
}

type MemberPhoto struct {
	New      *Photo  `json:"new"`
	Member   *Member `json:"member"`
	Original *Photo  `json:"original"`
}

type MemberPhotoInput struct {
	ID       string `json:"id"`
	MemberID string `json:"memberId"`
}

// 当`identity.type`是`ID`时，可以从`member`中取`department`值
type MemberRecord struct {
	ID         string          `json:"id"`
	Start      int64          `json:"start"`
	Device     *Device         `json:"device"`
	Identity   *MemberIdentity `json:"identity"`
	AccessType AccessType      `json:"accessType"`
	Capture    *Photo          `json:"capture"`
	Video      *Video          `json:"video"`
	Member     *Member         `json:"member"`
	Visitor    *EventVisitor   `json:"visitor"`
}

func (MemberRecord) IsIDNode() {}

// `search`: 搜姓名，`identity`: 身份支持多选
type MemberRecordFilter struct {
	Search     *string           `json:"search"`
	Device     []*IDInput        `json:"device"`
	AccessType []AccessType      `json:"accessType"`
	Start      *string           `json:"start"`
	End        *string           `json:"end"`
	Identity   []*IdentityFilter `json:"identity"`
}

type MultiLanguageItem struct {
	Cn string  `json:"cn"`
	En *string `json:"en"`
}

type MultiLanguageItemInput struct {
	Cn string  `json:"cn"`
	En *string `json:"en"`
}

type OperationData struct {
	Object *string `json:"object"`
}

func (OperationData) IsOperationDataInterface() {}

type OperationLog struct {
	ID             string                   `json:"id"`
	OrganizationID int                      `json:"organizationId"`
	Username       string                   `json:"username"`
	Role           string                   `json:"role"`
	Module         SystemModule             `json:"module"`
	Time           string                   `json:"time"`
	Action         *OperationAction         `json:"action"`
	Object         *OperationObject         `json:"object"`
	Count          *int                     `json:"count"`
	Data           []OperationDataInterface `json:"data"`
}

func (OperationLog) IsIDNode() {}

type OperationLogFilter struct {
	Search  *string        `json:"search"`
	Roles   []*IDInput     `json:"roles"`
	Modules []SystemModule `json:"modules"`
	Start   *string        `json:"start"`
	End     *string        `json:"end"`
}

type Organization struct {
	ID        string           `json:"id"`
	Name      string           `json:"name"`
	Type      OrganizationType `json:"type"`
	ShortName *string          `json:"shortName"`
	Address   *string          `json:"address"`
	Province  *Province        `json:"province"`
	City      *City            `json:"city"`
	District  *District        `json:"district"`
	Greetings *Greetings       `json:"greetings"`
}

func (Organization) IsIDNode() {}

type OrganizationCreateInput struct {
	Name      string          `json:"name"`
	ShortName *string         `json:"shortName"`
	Province  *string         `json:"province"`
	City      *string         `json:"city"`
	District  *string         `json:"district"`
	Address   *string         `json:"address"`
	Greetings *GreetingsInput `json:"greetings"`
}

type OrganizationInTree struct {
	ID       string                `json:"id"`
	Name     string                `json:"name"`
	Children []*OrganizationInTree `json:"children"`
}

type OrganizationUpdateInput struct {
	Name      *string         `json:"name"`
	ShortName *string         `json:"shortName"`
	Province  *string         `json:"province"`
	City      *string         `json:"city"`
	District  *string         `json:"district"`
	Address   *string         `json:"address"`
	Greetings *GreetingsInput `json:"greetings"`
}

type OtherPerson struct {
	ID             string              `json:"id"`
	Name           string              `json:"name"`
	Photo          *Photo              `json:"photo"`
	Phone          *string             `json:"phone"`
	IDCard         *string             `json:"idCard"`
	SerialNumber   *string             `json:"serialNumber"`
	Email          *string             `json:"email"`
	DoorCardNumber *string             `json:"doorCardNumber"`
	Permissions    []*MemberPermission `json:"permissions"`
	Tags           []string            `json:"tags"`
	Greeting       *string             `json:"greeting"`
	DisplayName    *string             `json:"displayName"`
	RemoveTime     *string             `json:"removeTime"`
	ExtraData      []*FieldValue       `json:"extraData"`
}

func (OtherPerson) IsIDNode() {}

type OtherPersonConflict struct {
	Phone    string       `json:"phone"`
	Original *OtherPerson `json:"original"`
	New      *OtherPerson `json:"new"`
}

type OtherPersonConflictInput struct {
	Phone  string                `json:"phone"`
	Action *MemberConflictAction `json:"action"`
}

// `order_by` sample: `['name', 'phone']`
type OtherPersonFilter struct {
	Search        *string            `json:"search"`
	Role          []*IDInput         `json:"role"`
	Departments   []*IDInput         `json:"departments"`
	Titles        []*IDInput         `json:"titles"`
	JobLevels     []*IDInput         `json:"jobLevels"`
	Branches      []string           `json:"branches"`
	Permissions   []*IDInput         `json:"permissions"`
	Tags          []string           `json:"tags"`
	CustomFilters []*FieldValueInput `json:"customFilters"`
	OrderBy       []string           `json:"orderBy"`
	IsAuthorized  *bool              `json:"isAuthorized"`
	SerialNumber  *string            `json:"serialNumber"`
	Email         *string            `json:"email"`
}

// `Page` represent page input.
//     If `noPage` is true, will no pagination.
type Page struct {
	Page     *int  `json:"page"`
	PageSize *int  `json:"pageSize"`
	NoPage   *bool `json:"noPage"`
}

type PermissionSchedule struct {
	Days   []Day   `json:"days"`
	IsFull bool    `json:"isFull"`
	Start  *string `json:"start"`
	End    *string `json:"end"`
}

type PermissionScheduleInput struct {
	Days   []Day   `json:"days"`
	IsFull bool    `json:"isFull"`
	Start  *string `json:"start"`
	End    *string `json:"end"`
}

type Photo struct {
	ID        string  `json:"id"`
	Src       *string `json:"src"`
	Name      *string `json:"name"`
	Thumbnail *string `json:"thumbnail"`
}

func (Photo) IsIDNode() {}

type PhotoInput struct {
	ID string `json:"id"`
}

type Province struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type RegisterDeviceInput struct {
	UUID     string         `json:"uuid"`
	Name     string         `json:"name"`
	Type     DeviceType     `json:"type"`
	Model    *string        `json:"model"`
	Location *string        `json:"location"`
	Version  *string        `json:"version"`
	URL      *string        `json:"url"`
	UsedFor  *DeviceUsedFor `json:"usedFor"`
	Tags     []string       `json:"tags"`
}

type RegisterUserInput struct {
	Account             string               `json:"account"`
	Password            string               `json:"password"`
	Company             string               `json:"company"`
	Contact             string               `json:"contact"`
	Phone               string               `json:"phone"`
	OrganizationType    *OrganizationType    `json:"organizationType"`
	OrganizationVersion *OrganizationVersion `json:"organizationVersion"`
}

// `signature`从邮件中的链接地址获取
type ResetPasswordInput struct {
	NewPassword string `json:"newPassword"`
	Signature   string `json:"signature"`
}

type Role struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (Role) IsIDNode() {}

type RoleFilter struct {
	Search *string `json:"search"`
}

type SetBlacklistConfigInput struct {
	EnableNotify bool       `json:"enableNotify"`
	NotifyRoles  []*IDInput `json:"notifyRoles"`
}

type StaticResourceOpData struct {
	Object   *string `json:"object"`
	Filename *string `json:"filename"`
	Link     *string `json:"link"`
}

func (StaticResourceOpData) IsOperationDataInterface() {}

type SyncData struct {
	Latest string         `json:"latest"`
	Edit   []*SyncVisitor `json:"edit"`
	Delete []string       `json:"delete"`
}

type SyncDateSchedule struct {
	Date  string `json:"date"`
	Start string `json:"start"`
	End   string `json:"end"`
}

type SyncIds struct {
	Edit   []string `json:"edit"`
	Delete []string `json:"delete"`
	Latest string   `json:"latest"`
}

type SyncMember struct {
	ID             string           `json:"id"`
	Name           string           `json:"name"`
	Type           int              `json:"type"`
	UUID           string           `json:"uuid"`
	IsActive       bool             `json:"isActive"`
	OrganizationID string           `json:"organizationId"`
	SerialNumber   *string          `json:"serialNumber"`
	DoorCardNumber *string          `json:"doorCardNumber"`
	Greeting       *string          `json:"greeting"`
	Schedules      []*SyncSchedule  `json:"schedules"`
	Department     *string          `json:"department"`
	JobLevel       *string          `json:"jobLevel"`
	Title          *string          `json:"title"`
	Avatar         *EnhancedPhoto   `json:"avatar"`
	Photos         []*EnhancedPhoto `json:"photos"`
	ExtraData      *string          `json:"extraData"`
}

func (SyncMember) IsIDNode() {}

type SyncSchedule struct {
	Day   Day    `json:"day"`
	Start string `json:"start"`
	End   string `json:"end"`
}

type SyncVisitor struct {
	ID        string              `json:"id"`
	Name      string              `json:"name"`
	Target    string              `json:"target"`
	Schedules []*SyncDateSchedule `json:"schedules"`
	Avatar    *Photo              `json:"avatar"`
	Photos    []*Photo            `json:"photos"`
}

func (SyncVisitor) IsIDNode() {}

type TableConfig struct {
	PageSize int           `json:"pageSize"`
	Fields   []*TableField `json:"fields"`
}

type TableConfigInput struct {
	PageSize *int               `json:"pageSize"`
	Fields   []*TableFieldInput `json:"fields"`
}

// `TableField` represents table field.
//     `visible` represents whether visible in table.
type TableField struct {
	Key           string    `json:"key"`
	Name          string    `json:"name"`
	Type          FieldType `json:"type"`
	Required      bool      `json:"required"`
	Visible       bool      `json:"visible"`
	Order         int       `json:"order"`
	SelectOptions []string  `json:"selectOptions"`
}

func (TableField) IsField() {}

type TableFieldInput struct {
	Key     string `json:"key"`
	Visible bool   `json:"visible"`
}

type Tag struct {
	ID             string  `json:"id"`
	Name           string  `json:"name"`
	Type           TagType `json:"type"`
	OrganizationID string  `json:"organizationId"`
}

func (Tag) IsIDNode() {}

type TagFilter struct {
	Name *string   `json:"name"`
	Type []TagType `json:"type"`
}

type TimeRangeOpData struct {
	Object *string `json:"object"`
	Start  *string `json:"start"`
	End    *string `json:"end"`
}

func (TimeRangeOpData) IsOperationDataInterface() {}

type Title struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	MemberCount *int   `json:"memberCount"`
}

func (Title) IsIDNode() {}

type UpdateBlacklistInput struct {
	Name   *string     `json:"name"`
	Photo  *PhotoInput `json:"photo"`
	Remark *string     `json:"remark"`
}

type UpdateDeviceInput struct {
	Name              *string            `json:"name"`
	Organization      *IDInput           `json:"organization"`
	Tags              []string           `json:"tags"`
	Timezone          *string            `json:"timezone"`
	ShowUsername      *bool              `json:"showUsername"`
	ShowFaceRect      *bool              `json:"showFaceRect"`
	EnableScreenSaver *bool              `json:"enableScreenSaver"`
	ScreenSaverTime   *int               `json:"screenSaverTime"`
	ScreenSaverPhoto  *PhotoInput        `json:"screenSaverPhoto"`
	Config            []*FieldValueInput `json:"config"`
}

type UpdateEventInput struct {
	Status             *EventStatus             `json:"status"`
	Visitor            *EventVisitorUpdateInput `json:"visitor"`
	Target             *IDInput                 `json:"target"`
	TargetOrganization *IDInput                 `json:"targetOrganization"`
	Reason             *VisitReason             `json:"reason"`
	BookTime           *string                  `json:"bookTime"`
}

type UpdateMeInput struct {
	Username    *string     `json:"username"`
	Photo       *PhotoInput `json:"photo"`
	Phone       *string     `json:"phone"`
	OldPassword *string     `json:"oldPassword"`
	NewPassword *string     `json:"newPassword"`
	WechatCode  *string     `json:"wechatCode"`
}

type UpdateMemberInput struct {
	Phone          *string            `json:"phone"`
	Photo          *PhotoInput        `json:"photo"`
	Name           *string            `json:"name"`
	Blacklist      *bool              `json:"blacklist"`
	Role           *IDInput           `json:"role"`
	IDCard         *string            `json:"idCard"`
	SerialNumber   *string            `json:"serialNumber"`
	DoorCardNumber *string            `json:"doorCardNumber"`
	Department     *IDInput           `json:"department"`
	JobLevel       *IDInput           `json:"jobLevel"`
	Title          *IDInput           `json:"title"`
	Permissions    []*IDInput         `json:"permissions"`
	Tags           []string           `json:"tags"`
	Greeting       *string            `json:"greeting"`
	DisplayName    *string            `json:"displayName"`
	Probation      *bool              `json:"probation"`
	HireDate       *string            `json:"hireDate"`
	CorrectionTime *string            `json:"correctionTime"`
	ExtraData      []*FieldValueInput `json:"extraData"`
	Remark         *string            `json:"remark"`
}

type UpdateMemberPermission struct {
	Name         *string                    `json:"name"`
	ScheduleType *ScheduleType              `json:"scheduleType"`
	Schedules    []*PermissionScheduleInput `json:"schedules"`
	Departments  []*IDInput                 `json:"departments"`
	Devices      []*IDInput                 `json:"devices"`
	Remarks      *string                    `json:"remarks"`
}

type UpdateMemberPermissionInput struct {
	Ids         []string                 `json:"ids"`
	Permissions []*MemberPermissionInput `json:"permissions"`
	Action      PermissionAction         `json:"action"`
}

type UpdateMemberRecordInput struct {
	End     *string  `json:"end"`
	Capture *IDInput `json:"capture"`
	Video   *IDInput `json:"video"`
}

type UpdateOpData struct {
	Object  *string        `json:"object"`
	Content []*ContentUnit `json:"content"`
}

func (UpdateOpData) IsOperationDataInterface() {}

type UpdateOtherPersonInput struct {
	Name           *string            `json:"name"`
	Phone          *string            `json:"phone"`
	Photo          *PhotoInput        `json:"photo"`
	Type           *string            `json:"type"`
	IDCard         *string            `json:"idCard"`
	SerialNumber   *string            `json:"serialNumber"`
	DoorCardNumber *string            `json:"doorCardNumber"`
	Email          *string            `json:"email"`
	Permissions    []*IDInput         `json:"permissions"`
	Tags           []string           `json:"tags"`
	Greeting       *string            `json:"greeting"`
	DisplayName    *string            `json:"displayName"`
	ExtraData      []*FieldValueInput `json:"extraData"`
}

// 批量操作只能修改`isActive`
type UpdateVehicleInput struct {
	LicensePlate *string  `json:"licensePlate"`
	IsActive     *bool    `json:"isActive"`
	Owner        *string  `json:"owner"`
	Phone        *string  `json:"phone"`
	Tags         []string `json:"tags"`
	Member       *IDInput `json:"member"`
}

type UpdateVehicleRecordInput struct {
	End *string `json:"end"`
}

type UploadImage struct {
	Image *Photo `json:"image"`
}

// ng_count: error occurred in fields except level one fields
//
//     critical_count: occurred in level one fields
type UploadMember struct {
	Success       bool              `json:"success"`
	OkCount       int               `json:"okCount"`
	NgCount       int               `json:"ngCount"`
	CriticalCount int               `json:"criticalCount"`
	Conflicts     []*MemberConflict `json:"conflicts"`
}

// ng_count: error occurred in fields except level one fields
//
//     critical_count: occurred in level one fields
type UploadOtherPerson struct {
	Success       bool                   `json:"success"`
	OkCount       int                    `json:"okCount"`
	NgCount       int                    `json:"ngCount"`
	CriticalCount int                    `json:"criticalCount"`
	Conflicts     []*OtherPersonConflict `json:"conflicts"`
}

type UploadPhoto struct {
	Success       bool           `json:"success"`
	Count         int            `json:"count"`
	NotExistCount int            `json:"notExistCount"`
	IllegalCount  int            `json:"illegalCount"`
	ConflictCount int            `json:"conflictCount"`
	Photos        []*MemberPhoto `json:"photos"`
}

type UploadVideo struct {
	Video *Video `json:"video"`
}

// `isActive` 表示激活状态， 如果未激活，则除了登陆之外无法做任何事情.
// 激活有两个触发方式，一是登陆之后修改密码，而是通过激活邮件
type User struct {
	ID                  string        `json:"id"`
	Account             string        `json:"account"`
	Username            string        `json:"username"`
	IsActive            bool          `json:"isActive"`
	Roles               []*Role       `json:"roles"`
	ManagedOrganization *Organization `json:"managedOrganization"`
	HasWechat           bool          `json:"hasWechat"`
	Phone               *string       `json:"phone"`
	CompanyID           *string       `json:"companyId"`
	Photo               *Photo        `json:"photo"`
	LastLogin           *string       `json:"lastLogin"`
	Permissions         []string      `json:"permissions"`
	RelatedMemberID     *string       `json:"relatedMemberId"`
}

func (User) IsIDNode() {}

// 车辆和ID共用标签，通过memberTags获取
type Vehicle struct {
	ID           string   `json:"id"`
	LicensePlate string   `json:"licensePlate"`
	Owner        string   `json:"owner"`
	Phone        string   `json:"phone"`
	IsActive     bool     `json:"isActive"`
	Tags         []string `json:"tags"`
	Member       *Member  `json:"member"`
}

func (Vehicle) IsIDNode() {}

// `search`: 车主，车牌号 `orderBy`: 车主，车牌号
type VehicleFilter struct {
	IsActive []bool   `json:"isActive"`
	Search   *string  `json:"search"`
	Tags     []string `json:"tags"`
	OrderBy  []string `json:"orderBy"`
}

// `VehicleIdentity`: 身份，当`type`是`ID`时，`department`会有值
type VehicleIdentity struct {
	Type       IdentityType  `json:"type"`
	Department []*Department `json:"department"`
}

// 当`identity.type`是`ID`时，可以从`member`中取`department`值
type VehicleRecord struct {
	ID           string           `json:"id"`
	Start        string           `json:"start"`
	Device       *Device          `json:"device"`
	Identity     *VehicleIdentity `json:"identity"`
	LicensePlate string           `json:"licensePlate"`
	Vehicle      *Vehicle         `json:"vehicle"`
	Visitor      *EventVisitor    `json:"visitor"`
}

func (VehicleRecord) IsIDNode() {}

// `search`: 搜车主和车牌号，`identity`: 身份支持多选
type VehicleRecordFilter struct {
	Search     *string           `json:"search"`
	Device     []*IDInput        `json:"device"`
	AccessType []AccessType      `json:"accessType"`
	Start      *string           `json:"start"`
	End        *string           `json:"end"`
	Identity   []*IdentityFilter `json:"identity"`
}

type Video struct {
	ID   string  `json:"id"`
	Src  *string `json:"src"`
	Name *string `json:"name"`
}

func (Video) IsIDNode() {}

type VisitCheckoutConfig struct {
	Enable    bool    `json:"enable"`
	Timestamp *string `json:"timestamp"`
}

type VisitCheckoutConfigInput struct {
	Enable    bool    `json:"enable"`
	Timestamp *string `json:"timestamp"`
}

type VisitConfig struct {
	CheckoutConfig *VisitCheckoutConfig `json:"checkoutConfig"`
}

type VisitConfigInput struct {
	CheckoutConfig *VisitCheckoutConfigInput `json:"checkoutConfig"`
}

type VisitEventOpData struct {
	Object  *string `json:"object"`
	Visitor *string `json:"visitor"`
	Target  *string `json:"target"`
}

func (VisitEventOpData) IsOperationDataInterface() {}

type Visitor struct {
	ID         string  `json:"id"`
	Phone      string  `json:"phone"`
	Name       *string `json:"name"`
	Email      *string `json:"email"`
	IDType     *IDType `json:"idType"`
	IDNumber   *string `json:"idNumber"`
	Plate      *string `json:"plate"`
	Photo      *Photo  `json:"photo"`
	Company    *string `json:"company"`
	Department *string `json:"department"`
}

func (Visitor) IsIDNode() {}

type WeChatUser struct {
	WechatID   string  `json:"wechatId"`
	Name       *string `json:"name"`
	Phone      *string `json:"phone"`
	Company    *string `json:"company"`
	Department *string `json:"department"`
	Email      *string `json:"email"`
	Photo      *Photo  `json:"photo"`
	IDType     *IDType `json:"idType"`
	IDNumber   *string `json:"idNumber"`
	Plate      *string `json:"plate"`
	IsUpdated  *bool   `json:"isUpdated"`
}

type WxUpdateMeInput struct {
	Name       *string     `json:"name"`
	Company    *string     `json:"company"`
	Department *string     `json:"department"`
	Email      *string     `json:"email"`
	Photo      *PhotoInput `json:"photo"`
	IDType     *IDType     `json:"idType"`
	IDNumber   *string     `json:"idNumber"`
	Plate      *string     `json:"plate"`
}

// `FORBIDDEN`: 禁止访问，NORMAL`: 安全正常，`ILLEGAL`: 非法越权, `BLACKLIST`: 黑名单
type AccessType string

const (
	AccessTypeForbidden AccessType = "FORBIDDEN"
	AccessTypeNormal    AccessType = "NORMAL"
	AccessTypeIllegal   AccessType = "ILLEGAL"
	AccessTypeBlacklist AccessType = "BLACKLIST"
)

var AllAccessType = []AccessType{
	AccessTypeForbidden,
	AccessTypeNormal,
	AccessTypeIllegal,
	AccessTypeBlacklist,
}

func (e AccessType) IsValid() bool {
	switch e {
	case AccessTypeForbidden, AccessTypeNormal, AccessTypeIllegal, AccessTypeBlacklist:
		return true
	}
	return false
}

func (e AccessType) String() string {
	return string(e)
}

func (e *AccessType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccessType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccessType", str)
	}
	return nil
}

func (e AccessType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An enumeration.
type Day string

const (
	DayMonday    Day = "MONDAY"
	DayTuesday   Day = "TUESDAY"
	DayWednesday Day = "WEDNESDAY"
	DayThursday  Day = "THURSDAY"
	DayFriday    Day = "FRIDAY"
	DaySaturday  Day = "SATURDAY"
	DaySunday    Day = "SUNDAY"
)

var AllDay = []Day{
	DayMonday,
	DayTuesday,
	DayWednesday,
	DayThursday,
	DayFriday,
	DaySaturday,
	DaySunday,
}

func (e Day) IsValid() bool {
	switch e {
	case DayMonday, DayTuesday, DayWednesday, DayThursday, DayFriday, DaySaturday, DaySunday:
		return true
	}
	return false
}

func (e Day) String() string {
	return string(e)
}

func (e *Day) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Day(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Day", str)
	}
	return nil
}

func (e Day) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An enumeration.
type DeviceStatus string

const (
	DeviceStatusOnline  DeviceStatus = "ONLINE"
	DeviceStatusOffline DeviceStatus = "OFFLINE"
	DeviceStatusFault   DeviceStatus = "FAULT"
)

var AllDeviceStatus = []DeviceStatus{
	DeviceStatusOnline,
	DeviceStatusOffline,
	DeviceStatusFault,
}

func (e DeviceStatus) IsValid() bool {
	switch e {
	case DeviceStatusOnline, DeviceStatusOffline, DeviceStatusFault:
		return true
	}
	return false
}

func (e DeviceStatus) String() string {
	return string(e)
}

func (e *DeviceStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeviceStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeviceStatus", str)
	}
	return nil
}

func (e DeviceStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An enumeration.
type DeviceType string

const (
	DeviceTypeAndroid DeviceType = "ANDROID"
	DeviceTypeIPC     DeviceType = "IPC"
)

var AllDeviceType = []DeviceType{
	DeviceTypeAndroid,
	DeviceTypeIPC,
}

func (e DeviceType) IsValid() bool {
	switch e {
	case DeviceTypeAndroid, DeviceTypeIPC:
		return true
	}
	return false
}

func (e DeviceType) String() string {
	return string(e)
}

func (e *DeviceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeviceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeviceType", str)
	}
	return nil
}

func (e DeviceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An enumeration.
type DeviceUsedFor string

const (
	DeviceUsedForAll     DeviceUsedFor = "ALL"
	DeviceUsedForPerson  DeviceUsedFor = "PERSON"
	DeviceUsedForVehicle DeviceUsedFor = "VEHICLE"
)

var AllDeviceUsedFor = []DeviceUsedFor{
	DeviceUsedForAll,
	DeviceUsedForPerson,
	DeviceUsedForVehicle,
}

func (e DeviceUsedFor) IsValid() bool {
	switch e {
	case DeviceUsedForAll, DeviceUsedForPerson, DeviceUsedForVehicle:
		return true
	}
	return false
}

func (e DeviceUsedFor) String() string {
	return string(e)
}

func (e *DeviceUsedFor) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeviceUsedFor(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeviceUsedFor", str)
	}
	return nil
}

func (e DeviceUsedFor) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// `APPROVED`: 允许访问
// `WAIT`: 待审核
// `CANCEL`: 已取消
// `CHECK_IN`: 已签到
// `CHECK_OUT`: 已签出
// `CHECK_IN_DELAY`: 逾期未签到
// `REVIEW_DELAY`: 逾期未审核
type EventStatus string

const (
	EventStatusApproved     EventStatus = "APPROVED"
	EventStatusWait         EventStatus = "WAIT"
	EventStatusCancel       EventStatus = "CANCEL"
	EventStatusCheckIn      EventStatus = "CHECK_IN"
	EventStatusCheckOut     EventStatus = "CHECK_OUT"
	EventStatusCheckInDelay EventStatus = "CHECK_IN_DELAY"
	EventStatusReviewDelay  EventStatus = "REVIEW_DELAY"
)

var AllEventStatus = []EventStatus{
	EventStatusApproved,
	EventStatusWait,
	EventStatusCancel,
	EventStatusCheckIn,
	EventStatusCheckOut,
	EventStatusCheckInDelay,
	EventStatusReviewDelay,
}

func (e EventStatus) IsValid() bool {
	switch e {
	case EventStatusApproved, EventStatusWait, EventStatusCancel, EventStatusCheckIn, EventStatusCheckOut, EventStatusCheckInDelay, EventStatusReviewDelay:
		return true
	}
	return false
}

func (e EventStatus) String() string {
	return string(e)
}

func (e *EventStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventStatus", str)
	}
	return nil
}

func (e EventStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// `USAGE_PROBLEM`: 使用问题
// `BUG_REPORT`: 报告BUG
// `IMPROVE_SUGGEST`: 改进意见
// `OTHER`: 其他
type FeedBackType string

const (
	FeedBackTypeUsageProblem   FeedBackType = "USAGE_PROBLEM"
	FeedBackTypeBugReport      FeedBackType = "BUG_REPORT"
	FeedBackTypeImproveSuggest FeedBackType = "IMPROVE_SUGGEST"
	FeedBackTypeOther          FeedBackType = "OTHER"
)

var AllFeedBackType = []FeedBackType{
	FeedBackTypeUsageProblem,
	FeedBackTypeBugReport,
	FeedBackTypeImproveSuggest,
	FeedBackTypeOther,
}

func (e FeedBackType) IsValid() bool {
	switch e {
	case FeedBackTypeUsageProblem, FeedBackTypeBugReport, FeedBackTypeImproveSuggest, FeedBackTypeOther:
		return true
	}
	return false
}

func (e FeedBackType) String() string {
	return string(e)
}

func (e *FeedBackType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FeedBackType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FeedBackType", str)
	}
	return nil
}

func (e FeedBackType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An enumeration.
type FieldType string

const (
	FieldTypeText        FieldType = "TEXT"
	FieldTypeTime        FieldType = "TIME"
	FieldTypeDate        FieldType = "DATE"
	FieldTypeCheckbox    FieldType = "CHECKBOX"
	FieldTypeSelect      FieldType = "SELECT"
	FieldTypeTextarea    FieldType = "TEXTAREA"
	FieldTypeUpload      FieldType = "UPLOAD"
	FieldTypeMultiSelect FieldType = "MULTI_SELECT"
	FieldTypeTag         FieldType = "TAG"
	FieldTypePassword    FieldType = "PASSWORD"
	FieldTypeNumber      FieldType = "NUMBER"
)

var AllFieldType = []FieldType{
	FieldTypeText,
	FieldTypeTime,
	FieldTypeDate,
	FieldTypeCheckbox,
	FieldTypeSelect,
	FieldTypeTextarea,
	FieldTypeUpload,
	FieldTypeMultiSelect,
	FieldTypeTag,
	FieldTypePassword,
	FieldTypeNumber,
}

func (e FieldType) IsValid() bool {
	switch e {
	case FieldTypeText, FieldTypeTime, FieldTypeDate, FieldTypeCheckbox, FieldTypeSelect, FieldTypeTextarea, FieldTypeUpload, FieldTypeMultiSelect, FieldTypeTag, FieldTypePassword, FieldTypeNumber:
		return true
	}
	return false
}

func (e FieldType) String() string {
	return string(e)
}

func (e *FieldType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FieldType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FieldType", str)
	}
	return nil
}

func (e FieldType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// `ID_CARD`: 身份证 18字符
// `PASSPORT`: 护照 8-9字符
// `HK`: 港澳台身份证 10字符
// `OTHER`: 其他
type IDType string

const (
	IDTypeIDCard   IDType = "ID_CARD"
	IDTypePassport IDType = "PASSPORT"
	IDTypeHk       IDType = "HK"
	IDTypeOther    IDType = "OTHER"
)

var AllIDType = []IDType{
	IDTypeIDCard,
	IDTypePassport,
	IDTypeHk,
	IDTypeOther,
}

func (e IDType) IsValid() bool {
	switch e {
	case IDTypeIDCard, IDTypePassport, IDTypeHk, IDTypeOther:
		return true
	}
	return false
}

func (e IDType) String() string {
	return string(e)
}

func (e *IDType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IDType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IDType", str)
	}
	return nil
}

func (e IDType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// `STRANGER`: 陌生人，`ID`: 在职人员，`OTHER`: 其他人员，`TEMP_VISITOR`: 临时访客, `BLACKLIST`: 黑名单
type IdentityType string

const (
	IdentityTypeStranger    IdentityType = "STRANGER"
	IdentityTypeID          IdentityType = "ID"
	IdentityTypeOther       IdentityType = "OTHER"
	IdentityTypeTempVisitor IdentityType = "TEMP_VISITOR"
	IdentityTypeBlacklist   IdentityType = "BLACKLIST"
)

var AllIdentityType = []IdentityType{
	IdentityTypeStranger,
	IdentityTypeID,
	IdentityTypeOther,
	IdentityTypeTempVisitor,
	IdentityTypeBlacklist,
}

func (e IdentityType) IsValid() bool {
	switch e {
	case IdentityTypeStranger, IdentityTypeID, IdentityTypeOther, IdentityTypeTempVisitor, IdentityTypeBlacklist:
		return true
	}
	return false
}

func (e IdentityType) String() string {
	return string(e)
}

func (e *IdentityType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IdentityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IdentityType", str)
	}
	return nil
}

func (e IdentityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An enumeration.
type IssueType string

const (
	IssueTypeProblem     IssueType = "PROBLEM"
	IssueTypeCooperation IssueType = "COOPERATION"
)

var AllIssueType = []IssueType{
	IssueTypeProblem,
	IssueTypeCooperation,
}

func (e IssueType) IsValid() bool {
	switch e {
	case IssueTypeProblem, IssueTypeCooperation:
		return true
	}
	return false
}

func (e IssueType) String() string {
	return string(e)
}

func (e *IssueType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IssueType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IssueType", str)
	}
	return nil
}

func (e IssueType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An enumeration.
type MemberConflictAction string

const (
	MemberConflictActionOverWrite MemberConflictAction = "OVER_WRITE"
	MemberConflictActionSkip      MemberConflictAction = "SKIP"
)

var AllMemberConflictAction = []MemberConflictAction{
	MemberConflictActionOverWrite,
	MemberConflictActionSkip,
}

func (e MemberConflictAction) IsValid() bool {
	switch e {
	case MemberConflictActionOverWrite, MemberConflictActionSkip:
		return true
	}
	return false
}

func (e MemberConflictAction) String() string {
	return string(e)
}

func (e *MemberConflictAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MemberConflictAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MemberConflictAction", str)
	}
	return nil
}

func (e MemberConflictAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// `NORMAL`: 正常
// `REMOVED`: 移除
// `DELETED`: 彻底删除
type MemberStatus string

const (
	MemberStatusNormal  MemberStatus = "NORMAL"
	MemberStatusRemoved MemberStatus = "REMOVED"
	MemberStatusDeleted MemberStatus = "DELETED"
)

var AllMemberStatus = []MemberStatus{
	MemberStatusNormal,
	MemberStatusRemoved,
	MemberStatusDeleted,
}

func (e MemberStatus) IsValid() bool {
	switch e {
	case MemberStatusNormal, MemberStatusRemoved, MemberStatusDeleted:
		return true
	}
	return false
}

func (e MemberStatus) String() string {
	return string(e)
}

func (e *MemberStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MemberStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MemberStatus", str)
	}
	return nil
}

func (e MemberStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// `CREATE`: 添加, `DELETE`: 删除, `UPDATE`: 编辑,
// `INVITE_VISIT`: 发起方位, `APPROVE_VISIT`: 允许访问,
// `DENY_VISIT`: 拒绝访问, `CANCEL_VISIT`: 取消访问,
// `REMOVE`: 移除, `DESTROY`: 彻底删除, `REVERT`: 复原,
// `BATCH_UPLOAD`: 批量上传, `EXPORT`: 导出, `LOGIN`: 登录,
// `UPDATE_PASSWORD`: 修改登录密码
type OperationAction string

const (
	OperationActionCreate         OperationAction = "CREATE"
	OperationActionDelete         OperationAction = "DELETE"
	OperationActionUpdate         OperationAction = "UPDATE"
	OperationActionInviteVisit    OperationAction = "INVITE_VISIT"
	OperationActionApproveVisit   OperationAction = "APPROVE_VISIT"
	OperationActionDenyVisit      OperationAction = "DENY_VISIT"
	OperationActionCancelVisit    OperationAction = "CANCEL_VISIT"
	OperationActionRemove         OperationAction = "REMOVE"
	OperationActionDestroy        OperationAction = "DESTROY"
	OperationActionRevert         OperationAction = "REVERT"
	OperationActionBatchUpload    OperationAction = "BATCH_UPLOAD"
	OperationActionExport         OperationAction = "EXPORT"
	OperationActionLogin          OperationAction = "LOGIN"
	OperationActionUpdatePassword OperationAction = "UPDATE_PASSWORD"
)

var AllOperationAction = []OperationAction{
	OperationActionCreate,
	OperationActionDelete,
	OperationActionUpdate,
	OperationActionInviteVisit,
	OperationActionApproveVisit,
	OperationActionDenyVisit,
	OperationActionCancelVisit,
	OperationActionRemove,
	OperationActionDestroy,
	OperationActionRevert,
	OperationActionBatchUpload,
	OperationActionExport,
	OperationActionLogin,
	OperationActionUpdatePassword,
}

func (e OperationAction) IsValid() bool {
	switch e {
	case OperationActionCreate, OperationActionDelete, OperationActionUpdate, OperationActionInviteVisit, OperationActionApproveVisit, OperationActionDenyVisit, OperationActionCancelVisit, OperationActionRemove, OperationActionDestroy, OperationActionRevert, OperationActionBatchUpload, OperationActionExport, OperationActionLogin, OperationActionUpdatePassword:
		return true
	}
	return false
}

func (e OperationAction) String() string {
	return string(e)
}

func (e *OperationAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OperationAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OperationAction", str)
	}
	return nil
}

func (e OperationAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An enumeration.
type OperationObject string

const (
	OperationObjectID               OperationObject = "ID"
	OperationObjectOtherPerson      OperationObject = "OTHER_PERSON"
	OperationObjectOrganization     OperationObject = "ORGANIZATION"
	OperationObjectDepartment       OperationObject = "DEPARTMENT"
	OperationObjectJobLevel         OperationObject = "JOB_LEVEL"
	OperationObjectTitle            OperationObject = "TITLE"
	OperationObjectDevice           OperationObject = "DEVICE"
	OperationObjectPersonalInfo     OperationObject = "PERSONAL_INFO"
	OperationObjectAccessPermission OperationObject = "ACCESS_PERMISSION"
	OperationObjectVehicle          OperationObject = "VEHICLE"
	OperationObjectVisitEvent       OperationObject = "VISIT_EVENT"
	OperationObjectMemberRecord     OperationObject = "MEMBER_RECORD"
	OperationObjectVehicleRecord    OperationObject = "VEHICLE_RECORD"
	OperationObjectBlacklist        OperationObject = "BLACKLIST"
)

var AllOperationObject = []OperationObject{
	OperationObjectID,
	OperationObjectOtherPerson,
	OperationObjectOrganization,
	OperationObjectDepartment,
	OperationObjectJobLevel,
	OperationObjectTitle,
	OperationObjectDevice,
	OperationObjectPersonalInfo,
	OperationObjectAccessPermission,
	OperationObjectVehicle,
	OperationObjectVisitEvent,
	OperationObjectMemberRecord,
	OperationObjectVehicleRecord,
	OperationObjectBlacklist,
}

func (e OperationObject) IsValid() bool {
	switch e {
	case OperationObjectID, OperationObjectOtherPerson, OperationObjectOrganization, OperationObjectDepartment, OperationObjectJobLevel, OperationObjectTitle, OperationObjectDevice, OperationObjectPersonalInfo, OperationObjectAccessPermission, OperationObjectVehicle, OperationObjectVisitEvent, OperationObjectMemberRecord, OperationObjectVehicleRecord, OperationObjectBlacklist:
		return true
	}
	return false
}

func (e OperationObject) String() string {
	return string(e)
}

func (e *OperationObject) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OperationObject(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OperationObject", str)
	}
	return nil
}

func (e OperationObject) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// `COMPANY`: 公司, `PROPERTY`: 物业
type OrganizationType string

const (
	OrganizationTypeCompany  OrganizationType = "COMPANY"
	OrganizationTypeProperty OrganizationType = "PROPERTY"
)

var AllOrganizationType = []OrganizationType{
	OrganizationTypeCompany,
	OrganizationTypeProperty,
}

func (e OrganizationType) IsValid() bool {
	switch e {
	case OrganizationTypeCompany, OrganizationTypeProperty:
		return true
	}
	return false
}

func (e OrganizationType) String() string {
	return string(e)
}

func (e *OrganizationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrganizationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationType", str)
	}
	return nil
}

func (e OrganizationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// `VISITOR`: 访客版本, `ACCESS`: Access版本
type OrganizationVersion string

const (
	OrganizationVersionVisitor OrganizationVersion = "VISITOR"
	OrganizationVersionAccess  OrganizationVersion = "ACCESS"
)

var AllOrganizationVersion = []OrganizationVersion{
	OrganizationVersionVisitor,
	OrganizationVersionAccess,
}

func (e OrganizationVersion) IsValid() bool {
	switch e {
	case OrganizationVersionVisitor, OrganizationVersionAccess:
		return true
	}
	return false
}

func (e OrganizationVersion) String() string {
	return string(e)
}

func (e *OrganizationVersion) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrganizationVersion(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationVersion", str)
	}
	return nil
}

func (e OrganizationVersion) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An enumeration.
type PermissionAction string

const (
	PermissionActionAdd       PermissionAction = "ADD"
	PermissionActionOverwrite PermissionAction = "OVERWRITE"
)

var AllPermissionAction = []PermissionAction{
	PermissionActionAdd,
	PermissionActionOverwrite,
}

func (e PermissionAction) IsValid() bool {
	switch e {
	case PermissionActionAdd, PermissionActionOverwrite:
		return true
	}
	return false
}

func (e PermissionAction) String() string {
	return string(e)
}

func (e *PermissionAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PermissionAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PermissionAction", str)
	}
	return nil
}

func (e PermissionAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// WEEK 整周
// WEEKDAY_WEEKEND 工作日+休息日
// CUSTOMIZED 自定义
type ScheduleType string

const (
	ScheduleTypeWeek           ScheduleType = "WEEK"
	ScheduleTypeWeekdayWeekend ScheduleType = "WEEKDAY_WEEKEND"
	ScheduleTypeCustomized     ScheduleType = "CUSTOMIZED"
)

var AllScheduleType = []ScheduleType{
	ScheduleTypeWeek,
	ScheduleTypeWeekdayWeekend,
	ScheduleTypeCustomized,
}

func (e ScheduleType) IsValid() bool {
	switch e {
	case ScheduleTypeWeek, ScheduleTypeWeekdayWeekend, ScheduleTypeCustomized:
		return true
	}
	return false
}

func (e ScheduleType) String() string {
	return string(e)
}

func (e *ScheduleType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScheduleType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScheduleType", str)
	}
	return nil
}

func (e ScheduleType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// `PERSONAL_CENTER`: 个人中心,`ID_MANAGEMENT`: 人员管理,
// `ADMIN_CENTER`: 管理中心, `ACCESS_MANAGEMENT`: 权限管理,
// `ACCESS_LOG`: 通行记录, `VEHICLE_MANAGEMENT`: 车辆管理,
// `VISITOR_MANAGEMENT`: 访客管理, `BLACKLIST`: 黑名单
type SystemModule string

const (
	SystemModulePersonalCenter    SystemModule = "PERSONAL_CENTER"
	SystemModuleIDManagement      SystemModule = "ID_MANAGEMENT"
	SystemModuleAdminCenter       SystemModule = "ADMIN_CENTER"
	SystemModuleAccessManagement  SystemModule = "ACCESS_MANAGEMENT"
	SystemModuleAccessLog         SystemModule = "ACCESS_LOG"
	SystemModuleVehicleManagement SystemModule = "VEHICLE_MANAGEMENT"
	SystemModuleVisitorManagement SystemModule = "VISITOR_MANAGEMENT"
	SystemModuleBlacklist         SystemModule = "BLACKLIST"
)

var AllSystemModule = []SystemModule{
	SystemModulePersonalCenter,
	SystemModuleIDManagement,
	SystemModuleAdminCenter,
	SystemModuleAccessManagement,
	SystemModuleAccessLog,
	SystemModuleVehicleManagement,
	SystemModuleVisitorManagement,
	SystemModuleBlacklist,
}

func (e SystemModule) IsValid() bool {
	switch e {
	case SystemModulePersonalCenter, SystemModuleIDManagement, SystemModuleAdminCenter, SystemModuleAccessManagement, SystemModuleAccessLog, SystemModuleVehicleManagement, SystemModuleVisitorManagement, SystemModuleBlacklist:
		return true
	}
	return false
}

func (e SystemModule) String() string {
	return string(e)
}

func (e *SystemModule) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemModule(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SystemModule", str)
	}
	return nil
}

func (e SystemModule) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An enumeration.
type Table string

const (
	TableMember      Table = "MEMBER"
	TableOtherPerson Table = "OTHER_PERSON"
	TableDevice      Table = "DEVICE"
	TableVisitor     Table = "VISITOR"
)

var AllTable = []Table{
	TableMember,
	TableOtherPerson,
	TableDevice,
	TableVisitor,
}

func (e Table) IsValid() bool {
	switch e {
	case TableMember, TableOtherPerson, TableDevice, TableVisitor:
		return true
	}
	return false
}

func (e Table) String() string {
	return string(e)
}

func (e *Table) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Table(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Table", str)
	}
	return nil
}

func (e Table) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// MEMBER: 员工
// OTHER_PERSON: 其他人员
// OTHER_PERSON_TYPE: 其他人员类型
// VEHICLE: 车辆
// DEVICE: 设备
type TagType string

const (
	TagTypeMember          TagType = "MEMBER"
	TagTypeOtherPerson     TagType = "OTHER_PERSON"
	TagTypeOtherPersonType TagType = "OTHER_PERSON_TYPE"
	TagTypeVehicle         TagType = "VEHICLE"
	TagTypeDevice          TagType = "DEVICE"
)

var AllTagType = []TagType{
	TagTypeMember,
	TagTypeOtherPerson,
	TagTypeOtherPersonType,
	TagTypeVehicle,
	TagTypeDevice,
}

func (e TagType) IsValid() bool {
	switch e {
	case TagTypeMember, TagTypeOtherPerson, TagTypeOtherPersonType, TagTypeVehicle, TagTypeDevice:
		return true
	}
	return false
}

func (e TagType) String() string {
	return string(e)
}

func (e *TagType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TagType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TagType", str)
	}
	return nil
}

func (e TagType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// `BUSINESS`: 商务洽谈
// `INTERVIEW`: 招聘面试
// `EVENT`: 活动参观
// `SEMINAR`: 技术交流
// `OTHER`: 其他
type VisitReason string

const (
	VisitReasonBusiness  VisitReason = "BUSINESS"
	VisitReasonInterview VisitReason = "INTERVIEW"
	VisitReasonEvent     VisitReason = "EVENT"
	VisitReasonSeminar   VisitReason = "SEMINAR"
	VisitReasonOther     VisitReason = "OTHER"
)

var AllVisitReason = []VisitReason{
	VisitReasonBusiness,
	VisitReasonInterview,
	VisitReasonEvent,
	VisitReasonSeminar,
	VisitReasonOther,
}

func (e VisitReason) IsValid() bool {
	switch e {
	case VisitReasonBusiness, VisitReasonInterview, VisitReasonEvent, VisitReasonSeminar, VisitReasonOther:
		return true
	}
	return false
}

func (e VisitReason) String() string {
	return string(e)
}

func (e *VisitReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VisitReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VisitReason", str)
	}
	return nil
}

func (e VisitReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
